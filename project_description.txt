This is Chess Game (Better Called "Chess Engine"!)

the moves in each game should get saved.
there should be a computer player able to play using an algorithm.


class Drawable(ABC):
    @abstract_method
    def get_texture() -> pygame.Image
        ...

    @abstract_method
    def get_rect() -> Rect # with coordinates and width-hight
        ...

    def move(x, y):
        ... # adds to the x and y values of



class Cell: # cells are invisible but they have hitboxes with the size of a cell in the board texture
    -id: int
    -piece: Piece | None

    @property
    get_rect:
        return cell_rect
    

class Board(Drawable):
    -board list[list[Cell]] (2d array)

    def find_piece(<piece coordinates>):
        finds a piece in self.board using some sort of algorithm

class Piece(ABC, Drawable):
    -image


class Renderer:
    -render_q = Queue()

    def add_render_item(item: Drawable):
        ...

    def draw_q():
        iterate through self.render_q and dreaw them

    def update():
        pygame.screen.update()

    def draw_and_update():
        self.draw_q()
        self.update()



    
    

    
player classes:
NormalPlayer:
    get_input() -> return tuple[int, int] -> (mosue pos)

OnlinePlayer:
    get_input() -> iterates through messages-list and return if the message is a input message


MESSAGES_LIST: a list of messages grabbed by client.listen

socket client (runs on a seperate therad)
connect to the server
if user clicked on online play:
    tells the server to throw me in ready to play players list
    the server then finds a suited player based on you rank the throw both of you in a group so 
    you two can communicate together and play!
listens for messages:
    if a message recieved it throws that message in messages-list
sends message:
    sends message to server to its playing user


server:
Fastapi websocket server!